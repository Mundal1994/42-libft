#include "test.h"

static int	found_strchr(size_t max_len, char seek, size_t i, int correct)
{
	size_t	len = randi(max_len);
	size_t	hits = 3;
	char	*str;

	str = (char *) malloc(sizeof(char) * len + 1);
	rand_str(str, len);
	while (hits > 0)
	{
		str[randi(len)] = seek;
		hits--;
	}
	if (ft_strchr(str, seek) != strchr(str, seek))
	{
		printf("test #%zu failed (c=%c)\n", i, seek);
		printf("str: [%s]\nlibc:\t%p\nlibft:\t%p\n", str, strchr(str, seek), ft_strchr(str, seek));
		correct = 0;
		//abort();
	}
	free(str);
	return (correct);
}

static int	not_found_strchr(size_t max_len, char seek, size_t i, int correct)
{
	size_t	len = randi(max_len);
	char	*str;

	str = (char *) malloc(sizeof(char) * len + 1);
	rand_str(str, len);
	if (ft_strchr(str, seek) != strchr(str, seek))
	{
		printf("test #%zu failed\n", i);
		printf("str: [%s]\nlibc:\t%p\nlibft:\t%p\n", str, strchr(str, seek), ft_strchr(str, seek));
		correct = 0;
		//abort();
	}
	free(str);
	return (correct);
}

void	print_strchr_comparison(char *s1, char c, char *(*f2)(const char *, int c), char *(*f)(const char *, int c))
{
	int correct;
	char	*str1;
	char	*str2;

	str1 = f2(s1, c);
	str2 = f(s1, c);
	printf("Str: [%s] Looking for: [%c]\n", s1, c);
	printf("Expected: [%s]	Output: [%s]\n", str1, str2);
	if (str1 == NULL && str2 == NULL)
		printf(GREEN"				OK!\n"UNCOLOR);
	else if ((str1 == NULL && str2 != NULL) || (str1 != NULL && str2 == NULL))
		printf(RED"				KO!\n"UNCOLOR);
	else
	{
		correct = strcmp(str1, str2);
		if (!correct)
			printf(GREEN"				OK!\n"UNCOLOR);
		else
			printf(RED"				KO!\n"UNCOLOR);
	}
}

void	ft_test_strchr(void)
{
	printf(MAGENTA"STRCHR:\n"UNCOLOR);

	print_strchr_comparison("Hello", 'e', strchr, ft_strchr);
	print_strchr_comparison("Hi", 'e', strchr, ft_strchr);
	print_strchr_comparison("Hi", 'H', strchr, ft_strchr);
	print_strchr_comparison("", '\0', strchr, ft_strchr);
	print_strchr_comparison("This is a very long piece of text.", 'a', strchr, ft_strchr);
	print_strchr_comparison("Hello", 'q', strchr, ft_strchr);
	print_strchr_comparison("", 'H', strchr, ft_strchr);
	print_strchr_comparison("Nope", 'a', strchr, ft_strchr);
	print_strchr_comparison("Hello", 'l', strchr, ft_strchr);
	print_strchr_comparison("Hello my name is james james acaster", 'j', strchr, ft_strchr);

	// SECOND TEST
	size_t	tests = 100, i = 0;
	int correct = 1;

	not_found_strchr(0, 'a', i++, correct);
	printf("seeking present char\n");
	while (i < tests)
	{
		correct = found_strchr(100, rand_char(), i++, correct);
		if (correct == 0)
			printf(RED"				KO!\n"UNCOLOR);
	}
	i = 0;
	printf("seeking missing char\n");
	while (i < tests)
	{
		correct = not_found_strchr(100, '\t', i++, correct);
		if (correct == 0)
			printf(RED"				KO!\n"UNCOLOR);
	}
	i = 0;
	printf("seeking terminator\n");
	while (i < tests)
	{
		correct = not_found_strchr(100, '\0', i++, correct);
		if (correct == 0)
			printf(RED"				KO!\n"UNCOLOR);
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
}

