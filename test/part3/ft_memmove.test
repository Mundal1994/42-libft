#include "test.h"

static int	const_memmove(int i, int correct)
{
	char	str1[] = "meaning of life is fortytwo and here's more chars for string";
	char	str2[] = "meaning of life is fortytwo and here's more chars for string";
	size_t	len = 0;
	size_t	test_dst;
	size_t	test_src;
	size_t	test_len;

	if (i > 0)
		len = strlen(str1);
	test_len = randi(len);
	test_dst = randi(len - test_len);
	test_src = randi(len - test_len);
	memmove((str1 + test_dst), (str1 + test_src), test_len);
	ft_memmove((str2 + test_dst), (str2 + test_src), test_len);
	if (memcmp(str1, str2, sizeof(char) * len) != 0)
	{
		printf(RED"failed for test #%d (%zu chars):\n"UNCOLOR, i, len);
		printf("dst %zu src %zu len %zu\n", test_dst, test_src, test_len);
		printf("memmove:\t[%s]\nft_memmove:\t[%s]\n", str1, str2);
		return (correct);
		//abort();
	}
	return (correct);
}

void ft_test_memmove(void)
{
	printf(MAGENTA"MEMMOVE:\n"UNCOLOR);
	printf("test 1\n");
	char src[10] = "123456789\0";
	char dst[10] = "abcdefghi\0";

	//printf("Both functions are set to move '%s' over to '%s'. So the end result should just be '%s'.\n", src, dst, src);
	//printf("First output is the dst, the one after that is the return value of (ft_)memmove.\n\n");
	char* result = memmove(dst, src, 10);
	//printf("Built-in: %s - %s\n", dst, result);
	char ft_src[10] = "123456789\0";
	char ft_dst[10] = "abcdefghi\0";
	char* ft_result = ft_memmove(ft_dst, ft_src, 10);
	//printf("Custom:   %s - %s\n", ft_dst, ft_result);
	if (strcmp(result, ft_result) == 0)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);

	int		tests = 100;
	int		i = 0;
	int correct = 1;

	printf("test 2\n");
	while (i < tests)
		correct = const_memmove(i++, correct);
	i = 0;
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
}