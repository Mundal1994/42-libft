#include "libft.h"
#include "test.h"

static void	strcmp_printout(char *str1, char *str2)
{
	printf("[%s] vs [%s]\ngot %d, expected %d\nKO D:\n", str1, str2, 
			ft_strcmp(str1, str2), strcmp(str1, str2));
}

static int	strcmp_same(size_t max_len)
{
	size_t len_pre = randi(max_len);
	char *str1, *str2;
	int	ft_result, libc_result;

	str1 = (char *) malloc (sizeof(char) * (len_pre + 1));
	str2 = (char *) malloc (sizeof(char) * (len_pre + 1));
	rand_substrs(str1, str2, len_pre, 0);
	if ((ft_result = ft_strcmp(str1, str2)) != (libc_result = strcmp(str1, str2)))
	{
		strcmp_printout(str1, str2);
		if (signtest(ft_result, libc_result))
			printf("same sign though, continuing\n");
		else
			return (0);
		//abort();
	}
	free(str1);
	free(str2);
	return (1);
}

static int	strcmp_same_len(size_t max_len_pre, size_t max_len_post)
{
	size_t len_pre = randi(max_len_pre);
	size_t len_post = randi(max_len_post);
	char *str1, *str2;
	int	ft_result, libc_result;

	str1 = (char *) malloc (sizeof(char) * (len_pre + len_post + 1));
	str2 = (char *) malloc (sizeof(char) * (len_pre + len_post + 1));
	rand_substrs(str1, str2, len_pre, len_post);
	if ((ft_result = ft_strcmp(str1, str2)) != (libc_result = strcmp(str1, str2)))
	{
		strcmp_printout(str1, str2);
		if (signtest(ft_result, libc_result))
			printf("same sign though, continuing\n");
		else
			return (0);
		//abort();
	}
	free(str1);
	free(str2);
	return (1);
}

static int strcmp_diff_len(size_t max_len)
{
	size_t len = randi(max_len);
	char *str1, *str2;
	int	ft_result, libc_result;

	str1 = (char *) malloc (sizeof(char) * (len + 1));
	str2 = (char *) malloc (sizeof(char) * (len + 1));
	rand_substrs(str1, str2, len, 0);
	if (randi(2) == 0)
		*(str1 + randi(len)) = '\0';
	else
		*(str2 + randi(len)) = '\0';
	if ((ft_result = ft_strcmp(str1, str2)) != (libc_result = strcmp(str1, str2)))
	{
		strcmp_printout(str1, str2);
		if (signtest(ft_result, libc_result))
			printf("same sign though, continuing\n");
		else
			return (0);
		//abort();
	}
	free(str1);
	free(str2);
	return (1);
}

void	ft_test_strcmp(void)
{
	printf(MAGENTA"STRCMP:\n"UNCOLOR);

	printf("test 1\n");
	const char* s1 = "Hello there.";
	const char* s2 = "Hello there.";
	//printf("Comparing '%s' and '%s'.\n", s1, s2);
	//printf("Built-in: %i, ft: %i\n\n", strcmp(s1, s2), ft_strcmp(s1, s2));
	if (strcmp(s1, s2) - ft_strcmp(s1, s2) == 0)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);

	printf("test 2\n");
	const char* s3 = "Hello there.";
	const char* s4 = "Hello.";
	//printf("Comparing '%s' and '%s'.\n", s3, s4);
	//printf("Built-in: %i, ft: %i\n\n", strcmp(s3, s4), ft_strcmp(s3, s4));
	if (strcmp(s3, s4) - ft_strcmp(s3, s4) == 0)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);

	printf("test 3\n");
	const char* s5 = "Hello.";
	const char* s6 = "Hello there.";
	//printf("Comparing '%s' and '%s'.\n", s5, s6);
	//printf("Built-in: %i, ft: %i\n\n", strcmp(s5, s6), ft_strcmp(s5, s6));
	if (strcmp(s5, s6) - ft_strcmp(s5, s6) == 0)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);

	printf("test 4\n");
	const char* s7 = "";
	const char* s8 = "";
	//printf("Comparing '%s' and '%s'.\n", s7, s8);
	//printf("Built-in: %i, ft: %i\n\n", strcmp(s7, s8), ft_strcmp(s7, s8));
	if (strcmp(s7, s8) - ft_strcmp(s7, s8) == 0)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);

	printf("test 5\n");
	const char* s9 = "\0";
	const char* s10 = "\200";
	//printf("Comparing '%s' and '%s'.\n", s9, s10);
	//printf("Built-in: %i, ft: %i\n\n", strcmp(s9, s10), ft_strcmp(s9, s10));
	if (strcmp(s9, s10) - ft_strcmp(s9, s10) == 0)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);

	printf("test 6\n");
	s9 = "cba";
	s10 = "abc";
	//printf("Comparing '%s' and '%s'.\n", s9, s10);
	//printf("Built-in: %i, ft: %i\n\n", strcmp(s9, s10), ft_strcmp(s9, s10));
	if (strcmp(s9, s10) - ft_strcmp(s9, s10) == 0)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);

	

	size_t	tests = 100;
	size_t	i = 0;
	int correct = 0;

	//printf("test multi:\n");
	printf("comparing similar strings\n");
	strcmp_same(0);
	while (i < tests)
	{
		correct = strcmp_same(100);
		i++;
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
	i = 0;

	printf("comparing same length strings\n");
	while (i < tests)
	{
		correct = strcmp_same_len(50, 50);
		i++;
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
	i = 0;

	printf("comparing different length strings\n");
	while (i < tests)
	{
		correct = strcmp_diff_len(100);
		i++;
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
}
