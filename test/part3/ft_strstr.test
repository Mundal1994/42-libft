#include "../test.h"

void	print_comparison(char *s1, char *s2, char *(*f2)(const char *, const char *), char *(*f)(const char *, const char *))
{
	int correct;
	char	*str1;
	char	*str2;

	str1 = f2(s1, s2);
	str2 = f(s1, s2);
	printf("Comparing: [%s] and [%s]\n", s1, s2);
	printf("Expected: [%s]	Output: [%s]\n", str1, str2);
	if (str1 == NULL && str2 == NULL)
		printf(GREEN"				OK!\n"UNCOLOR);
	else if ((str1 == NULL && str2 != NULL) || (str1 != NULL && str2 == NULL))
		printf(RED"				KO!\n"UNCOLOR);
	else
	{
		correct = strcmp(str1, str2);
		if (!correct)
			printf(GREEN"				OK!\n"UNCOLOR);
		else
			printf(RED"				KO!\n"UNCOLOR);
	}
}

void	ft(void)
{
	print_comparison("Haystack", "Hay", &strstr, &ft_strstr);
	print_comparison("Haystack", "stack", &strstr, &ft_strstr);
	print_comparison("Haystack", "Nope", &strstr, &ft_strstr);
	print_comparison("Haystack", "Haystack", &strstr, &ft_strstr);
	print_comparison("", "Haystack", &strstr, &ft_strstr);
	print_comparison("Haystack", "", &strstr, &ft_strstr);
	print_comparison("iM7Q'Kpdg}E42vmXk3uyZ!", "2vmXk", &strstr, &ft_strstr);
	print_comparison("cHUT3xfr2D>y$", "xfr2D", &strstr, &ft_strstr);
	print_comparison("w7?A%Tr@v", "A%", &strstr, &ft_strstr);
	//print_comparison(NULL, "Haystack", &strstr, &ft_strstr);
	//print_comparison("Haystack", NULL, &strstr, &ft_strstr);
}

static int	found_strstr(size_t max_haystack, size_t i)
{
	size_t	haystack_len = randi(max_haystack);
	size_t	needle_len = randi(haystack_len);
	char	*haystack, *needle;

	haystack = (char *) malloc(sizeof(char) * (haystack_len + 1));
	needle = (char *) malloc(sizeof(char) * (needle_len + 1));
	rand_str(haystack, haystack_len);
	rand_str(needle, needle_len);
	memcpy(haystack + (randi(haystack_len - needle_len)), needle, needle_len);
	if (ft_strstr(haystack, needle) != strstr(haystack, needle))
	{
		printf(RED"test #%zu failed\nhystck:\t[%s]\nneedle:\t[%s]\n"UNCOLOR,
				i, haystack, needle);
		printf("libc:\t%p\nlibft:\t%p\n", strstr(haystack, needle),
				ft_strstr(haystack, needle));
		return (0);
	}
	free(haystack);
	free(needle);
	return (1);
}

static int	not_found_strstr(size_t max_haystack, size_t i)
{
	size_t	haystack_len = randi(max_haystack);
	size_t	needle_len = randi(haystack_len);
	char	*haystack, *needle;

	haystack = (char *) malloc(sizeof(char) * (haystack_len + 1));
	needle = (char *) malloc(sizeof(char) * (needle_len + 1));
	rand_str(haystack, haystack_len);
	rand_str(needle, needle_len);
	if (ft_strstr(haystack, needle) != strstr(haystack, needle))
	{
		printf(RED"test #%zu failed\nhystck:\t[%s]\nneedle:\t[%s]\n"UNCOLOR,
				i, haystack, needle);
		printf("libc:\t%p\nlibft:\t%p\n", strstr(haystack, needle),
				ft_strstr(haystack, needle));
		return (0);
	}
	free(haystack);
	free(needle);
	return (1);
}

void	ft_test_strstr(void)
{
	printf(MAGENTA"STRSTR\n"UNCOLOR);
	ft();

	size_t	tests = 100, i = 0;
	int correct = 1;
	found_strstr(0, i++);
	printf("seeking present needle\n");
	while (i < tests)
	{
		correct = found_strstr(30, i++);
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
	i = 0;
	printf("seeking missing needle\n");
	while (i < tests)
	{
		correct = not_found_strstr(50, i++);
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
}

