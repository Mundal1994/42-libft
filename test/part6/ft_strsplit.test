#include "test.h"

void	print_test(char *str, char splitter)
{
	int		i;
	char	**array;

	printf("Splitting '%s' with '%c'\n\n", str, splitter);
	array = ft_strsplit(str, splitter);

	if (!array)
	{
		printf("Array is null!\n");
		return ;
	}
	printf("- start\n");
	i = 0;
	while (array[i])
	{
		printf("%s\n", array[i]);
		i++;
	}
	printf("- end\n\n");
}

static void	free_str_tab(char ***tab)
{
	char	**t1 = *tab;

	while (*t1 != NULL)
		free(*t1++);
	free(*t1);
	free(*tab);
}

static void	validate_split(char const *s, char c, size_t i, char const *expected)
{
	char	**tab;

	tab = ft_strsplit(s, c);
	//printf("[%s]\n", tab[i]);
	assert(strcmp(tab[i], expected) == 0);
	free_str_tab(&tab);
}

static void validate_full_split(char const *s, char c, char const **expected)
{
	char	**words;
	size_t	i = 0;

	words = ft_strsplit(s, c);
	while (words[i] != NULL)
	{
		//printf("[%s] vs [%s]\n", words[i], expected[i]);
		assert(strcmp(words[i], expected[i]) == 0);
		i++;
	}
	if (words[i] != NULL)
	{
		printf(RED"failed: split array does not terminate properly\n");
		printf("expected NULL, got [%s]\n"UNCOLOR, words[i]);
		abort();
	}
	free_str_tab(&words);
}

void ft_test_strsplit(void)
{
	printf(MAGENTA"STRSPLIT\n"UNCOLOR);
	/*printf("test 1\n");
	print_test("This is a pretty long sentence.", ' ');
	printf("test 2\n");
	print_test("    This  is    a    pretty    long         sentence.       ", ' ');
	printf("test 3\n");
	print_test("This ", ' ');
	printf("test 4\n");
	print_test(NULL, '*');*/

	char const	s1[] = "What's up it's DJ TurtleT in the house!";
	char const	s2[] = "Random string written. Random string splitted.";
	char const	s3[] = "//////////What's this/////////// ////////////Hello////////!////";
	char const	s4[] = "JamesBrown";
	char const	s5[] = "";
	char const	s6[] = "-----------------------------------";

	char const *full_s1[] = { "What's", "up", "it's", "DJ", "TurtleT", "in", "the", "house!", 0 };
	char const *full_s3[] = { "What's this", " ", "Hello", "!", 0 };

	printf("test - if nothing displays it's correct\n");
	validate_full_split(s1, ' ', full_s1);
	validate_full_split(s3, '/', full_s3);
	validate_split(s1, ' ', 7, "house!");
	validate_split(s2, '.', 1, " Random string splitted");
	validate_split(s3, '/', 3, "!");
	validate_split(s4, '\t', 0, "JamesBrown");

	char **tab = ft_strsplit(s5, 'a');
	assert(*tab == NULL);
	free_str_tab(&tab);
	tab = ft_strsplit(s6, '-');
	assert(*tab == NULL);
	free_str_tab(&tab);

	// free pointer test
	/*if (dest)
	{
		printf("dest pnt 0: %p\n", dest[0]);
		printf("dest pnt 1: %p\n", dest[1]);
		printf("dest pnt 2: %p\n", dest[2]);
		printf("dest pnt primary: %p\n", dest);
		dest = ft_free2d(dest);
		//printf("dest pnt 0: %p\n", dest[0]);
		//printf("dest pnt 1: %p\n", dest[1]);
		//printf("dest pnt 2: %p\n", dest[2]);
		printf("dest pnt primary: %p\n", dest);
	}*/
	/*
	printf("test 1\n");
	print_test("This is a pretty long sentence.", ' ');
	*/
}
