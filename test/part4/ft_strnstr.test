#include "test.h"

void	print_strnstr_comparison(char *s1, char *s2, size_t size, char *(*f2)(const char *, const char *, size_t), char *(*f)(const char *, const char *, size_t))
{
	int correct;
	char	*str1;
	char	*str2;

	str1 = f2(s1, s2, size);
	str2 = f(s1, s2, size);
	printf("Comparing: [%s] and [%s] up to [%lu]\n", s1, s2, size);
	printf("Expected: [%s]	Output: [%s]\n", str1, str2);
	if (str1 == NULL && str2 == NULL)
		printf(GREEN"				OK!\n"UNCOLOR);
	else if ((str1 == NULL && str2 != NULL) || (str1 != NULL && str2 == NULL))
		printf(RED"				KO!\n"UNCOLOR);
	else
	{
		correct = strcmp(str1, str2);
		if (!correct)
			printf(GREEN"				OK!\n"UNCOLOR);
		else
			printf(RED"				KO!\n"UNCOLOR);
	}
}

void	ft_test(void)
{
	print_strnstr_comparison("Haystack", "Hay", 8, strnstr, ft_strnstr);
	print_strnstr_comparison("Haystack", "stack", 8, strnstr, ft_strnstr);
	print_strnstr_comparison("Haystack", "stack", 3, strnstr, ft_strnstr);
	print_strnstr_comparison("Haystack", "stack", 5, strnstr, ft_strnstr);
	print_strnstr_comparison("Haystack", "Nope", 8, strnstr, ft_strnstr);
	print_strnstr_comparison("Haystack", "Haystack", 8, strnstr, ft_strnstr);
	print_strnstr_comparison("", "Haystack", 8, strnstr, ft_strnstr);
	print_strnstr_comparison("Haystack", "", 8, strnstr, ft_strnstr);
	print_strnstr_comparison("Haystack", "Hayy", 8, strnstr, ft_strnstr);
	// print_strnstr_comparison("Haystack", NULL, 8, strnstr, ft_strnstr);
	// print_strnstr_comparison(NULL, "stack", 8, strnstr, ft_strnstr);
}

void	too_short_strnstr(void)
{
	char	s1[] = "12345needle23456";
	char	s2[] = "needle";
	char	*p1 = strnstr(s1, s2, 7), *p2 = ft_strnstr(s1, s2, 7);

	if (p1 != p2)
	{
		printf(RED"failed when needle is not fully covered by len\n");
		printf("s1=[%s]\nlibc:\t%p\nlibft\t%p\n"UNCOLOR, s1, p1, p2);
		abort();
	}
}

static int	found_strnstr(size_t max_haystack, size_t needle_len, size_t i)
{
	size_t	haystack_len = needle_len + randi(max_haystack - needle_len);
	size_t	len = haystack_len/2 + randi(haystack_len/2 + 1);
	char	*haystack, *needle;

	haystack = (char *) malloc(sizeof(char) * (haystack_len + 1));
	needle = (char *) malloc(sizeof(char) * (needle_len + 1));
	rand_str(haystack, haystack_len);
	rand_str(needle, needle_len);
	memcpy(haystack + (randi(haystack_len - needle_len)), needle, needle_len);
	if (ft_strnstr(haystack, needle, len) != strnstr(haystack, needle, len))
	{
		printf(RED"test #%zu failed (len=%zu)\nhystck:\t[%s]\nneedle:\t[%s]\n",
				i, len, haystack, needle);
		printf("libc:\t%p\nlibft:\t%p\n"UNCOLOR, strnstr(haystack, needle, len),
				ft_strnstr(haystack, needle, len));
		return (0);abort();
	}
	free(haystack);
	free(needle);
	return (1);
}

static int	not_found_strnstr(size_t max_haystack, size_t needle_len, size_t i)
{
	size_t	haystack_len = needle_len + randi(max_haystack - needle_len);
	size_t	len = haystack_len/2 + randi(haystack_len/2 + 1);
	char	*haystack, *needle;

	haystack = (char *) malloc(sizeof(char) * (haystack_len + 1));
	needle = (char *) malloc(sizeof(char) * (needle_len + 1));
	rand_str(haystack, haystack_len);
	rand_str(needle, needle_len);
	if (ft_strnstr(haystack, needle, len) != strnstr(haystack, needle, len))
	{
		printf(RED"test #%zu failed (len=%zu)\nhystck:\t[%s]\nneedle:\t[%s]\n",
				i, len, haystack, needle);
		printf("libc:\t%p\nlibft:\t%p\n"UNCOLOR, strnstr(haystack, needle, len),
				ft_strnstr(haystack, needle, len));
		return (0);//abort();
	}
	free(haystack);
	free(needle);
	return (1);
}

void	ft_test_strnstr(void)
{
	printf(MAGENTA"STRNSTR\n"UNCOLOR);
	ft_test();

	size_t	tests = 100, i = 0;
	int correct = 1;
	too_short_strnstr();
	found_strnstr(0, 0, i++);
	printf("seeking present needle\n");
	while (i < tests)
	{
		correct = found_strnstr(40, 8, i++);
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
	i = 0;
	printf("seeking missing needle\n");
	while (i < tests)
	{
		correct = not_found_strnstr(50, 15, i++);
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
}

