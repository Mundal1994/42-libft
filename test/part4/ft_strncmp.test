#include "libft.h"
#include "test.h"

static void	strncmp_printout(char *str1, char *str2, size_t n)
{
	printf("[%s] vs [%s], n=%zu\ngot %d, should have been %d\nKO D:\n", str1, str2, n, 
			ft_strncmp(str1, str2, n), strncmp(str1, str2, n));
}

static int	strncmp_same(size_t max_len)
{
	size_t 	len_pre = randi(max_len);
	size_t	n = randi(len_pre);
	char 	*str1, *str2;
	int	ft_result, libc_result;

	str1 = (char *) malloc (sizeof(char) * (len_pre + 1));
	str2 = (char *) malloc (sizeof(char) * (len_pre + 1));
	rand_substrs(str1, str2, len_pre, 0);
	if ((ft_result = ft_strncmp(str1, str2, n)) != (libc_result = strncmp(str1, str2, n)))
	{
		strncmp_printout(str1, str2, n);
		if (signtest(ft_result, libc_result))
			printf("same sign though, continuing\n");
		else
			return (0);//abort();
	}
	free(str1);
	free(str2);
	return (1);
}

static int	strncmp_same_len(size_t max_len_pre, size_t max_len_post)
{
	size_t	len_pre = randi(max_len_pre);
	size_t	len_post = randi(max_len_post);
	size_t	n = randi(len_pre + len_post);
	char	*str1, *str2;
	int	ft_result, libc_result;

	str1 = (char *) malloc (sizeof(char) * (len_pre + len_post + 1));
	str2 = (char *) malloc (sizeof(char) * (len_pre + len_post + 1));
	rand_substrs(str1, str2, len_pre, len_post);
	if ((ft_result = ft_strncmp(str1, str2, n)) != (libc_result = strncmp(str1, str2, n)))
	{
		strncmp_printout(str1, str2, n);
		if (signtest(ft_result, libc_result))
			printf("same sign though, continuing\n");
		else
			return (0);//abort();
	}
	free(str1);
	free(str2);
	return (1);
}

static int strncmp_diff_len(size_t max_len)
{
	size_t	len = randi(max_len);
	size_t	n = randi(len);
	char	*str1, *str2;
	int	ft_result, libc_result;

	str1 = (char *) malloc (sizeof(char) * (len + 1));
	str2 = (char *) malloc (sizeof(char) * (len + 1));
	rand_substrs(str1, str2, len, 0);
	if (randi(2) == 0)
		*(str1 + randi(len)) = '\0';
	else
		*(str2 + randi(len)) = '\0';
	if ((ft_result = ft_strncmp(str1, str2, n)) != (libc_result = strncmp(str1, str2, n)))
	{
		strncmp_printout(str1, str2, n);
		if (signtest(ft_result, libc_result))
			printf("same sign though, continuing\n");
		else
			return (0);//abort();
	}
	free(str1);
	free(str2);
	return (1);
}

void	ft_test_strncmp(void)
{
	printf(MAGENTA"STRNCMP:\n"UNCOLOR);
/*
	const char* s1 = "Hello there.";
	const char* s2 = "Hello.";
	int	i1 = 5;
	printf("Comparing first %i of '%s' and '%s'.\n", i1, s1, s2);
	printf("Built-in: %i, ft: %i\n\n", strncmp(s1, s2, i1), ft_strncmp(s1, s2, i1));

	const char* s3 = "Hello there.";
	const char* s4 = "Hello.";
	int	i2 = 0;
	printf("Comparing first %i of '%s' and '%s'.\n", i2, s3, s4);
	printf("Built-in: %i, ft: %i\n\n", strncmp(s3, s4, i2), ft_strncmp(s3, s4, i2));

	const char* s5 = "Hello there.";
	const char* s6 = "Hello.";
	int	i3 = 100;
	printf("Comparing first %i of '%s' and '%s'.\n", i3, s5, s6);
	printf("Built-in: %i, ft: %i\n\n", strncmp(s5, s6, i3), ft_strncmp(s5, s6, i3));

	const char* s7 = "";
	const char* s8 = "";
	int	i4 = 10;
	printf("Comparing first %i of '%s' and '%s'.\n", i4, s7, s8);
	printf("Built-in: %i, ft: %i\n", strncmp(s7, s8, i4), ft_strncmp(s7, s8, i4));*/

	size_t	tests = 100;
	size_t	i = 0;
	int correct = 1;

	printf("comparing similar strings\n");
	while (i < tests)
	{
		correct = strncmp_same(100);
		i++;
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
	i = 0;

	printf("comparing same length strings\n");
	while (i < tests)
	{
		strncmp_same_len(50, 50);
		i++;
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
	i = 0;

	printf("comparing different length strings\n");
	while (i < tests)
	{
		strncmp_diff_len(100);
		i++;
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
}
