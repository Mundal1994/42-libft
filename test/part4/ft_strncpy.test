#include "test.h"

static int	rand_strncpy(size_t max_len, size_t i)
{
	size_t	len = randi(max_len);
	size_t	buf_extra = 5;
	size_t	n = randi(len + 1);
	char	*str, *cpy;

	str = (char *) malloc(sizeof(char) * (len + 1));
	cpy = (char *) malloc(sizeof(char) * (len + buf_extra + 1));
	memset(cpy, 'b', len + buf_extra + 1);
	rand_str(str, len);
	ft_strncpy(cpy, str, n);
	if (memcmp(str, cpy, n) != 0)
	{
		printf(RED"test #%zu failed (len=%zu)\nstr: [%s]\ncpy: [%s]\n"UNCOLOR, i, n, str, cpy);
		return (0);//abort();
	}
	free(str);
	free(cpy);
	return (1);
}

static int	smaller_src_strncpy(void)
{
	char	str0[] = "fortytwo";
	char	cpy[30];

	memset(cpy, 'c', 30);
	ft_strncpy(cpy, str0, 20);
	if (memcmp(str0, cpy, strlen(str0)) != 0 || cpy[15] != '\0')
	{
		printf(RED"failed when src is smaller than dest\nsrc:\t[%s]\ndst:\t[%s]\n", str0, cpy);
		printf("dst[15]=%c (%d)\n"UNCOLOR, cpy[15], cpy[15]);
		return (0);abort();
	}
	return (1);
}

void	ft_test_strncpy(void)
{
	printf(MAGENTA"STRNCPY\n"UNCOLOR);
	/*
	printf("This test just copies a bunch of words to the same char array and prints the result. The intended result is on the left.\n\n");

	char s1[] = "Hello";
	printf("'Hello': '%s'\n", ft_strncpy(s1, "Hello", 5));
	printf("'Hi': '%s'\n", ft_strncpy(s1, "Hi", 5));
	printf("'Hel': '%s'\n", ft_strncpy(s1, "Hello", 3));
	printf("'There': '%s'\n", ft_strncpy(s1, "There", 5));
	printf("'': '%s'\n", ft_strncpy(s1, "", 2));*/

	size_t	tests = 100, i = 0;
	int correct = 1;

	printf("test random strings\n");
	smaller_src_strncpy();
	rand_strncpy(0, i++);
	while (i < tests)
	{
		rand_strncpy(100, i++);
		if (correct == 0)
			abort();
	}
	if (correct == 1)
		printf(GREEN"				OK!\n"UNCOLOR);
	else
		printf(RED"				KO!\n"UNCOLOR);
}
